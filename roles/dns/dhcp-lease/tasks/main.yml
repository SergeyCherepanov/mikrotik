---
- name: "Remove previous DHCP2DNS script"
  raw: '/system script remove name=DHCP2DNS'

- name: "Setup DHCP2DNS script"
  raw: '/system script add name=DHCP2DNS policy=read,test source=":local zone \"{{ local_domain }}\";\r\ \n     :local ttl \"00:05:00\"\r\ \n     :local hostname\r\ \n     :local ip\r\ \n     :local dnsip\r\ \n     :local dhcpip\r\ \n     :local dnsnode\r\ \n     :local dhcpnode\r\ \n     \r\ \n     /ip dns static;\r\ \n     :foreach i in=[find where name ~ (\".*\\\\.\".\$zone) ] do={\r\ \n       :set hostname [ get \$i name ];\r\ \n       :set hostname [ :pick \$hostname 0 ( [ :len \$hostname ] - ( [ :len \$zone ] + 1 ) ) ];\r\ \n       /ip dhcp-server lease;\r\ \n       :set dhcpnode [ find where host-name=\$hostname ];\r\ \n       :if ( [ :len \$dhcpnode ] > 0) do={\r\ \n         :log debug (\"Lease for \".\$hostname.\" still exists. Not deleting.\");\r\ \n       } else={\r\ \n     # there`s no lease by that name. Maybe this mac has a static name.\r\ \n         :local found false\r\ \n         /system script environment\r\ \n         :foreach n in=[ find where name ~ \"shost[0-9A-F]+\" ] do={\r\ \n            :if ( [ get \$n value ] = \$hostname ) do={\r\ \n              :set found true;\r\ \n            }\r\ \n         }\r\ \n         :if ( found ) do={\r\ \n           :log debug (\"Hostname \".\$hostname.\" is static\");\r\ \n         } else={\r\ \n           :log info (\"Lease expired for \".\$hostname.\", deleting DNS entry.\");\r\ \n           /ip dns static remove \$i;\r\ \n         }\r\ \n       }\r\ \n     }\r\ \n     \r\ \n     /ip dhcp-server lease;\r\ \n     :foreach i in=[find] do={\r\ \n       :set hostname \"\"\r\ \n       :local mac\r\ \n       :set dhcpip [ get \$i address ];\r\ \n       :set mac [ get \$i mac-address ];\r\ \n       :while (\$mac ~ \":\") do={\r\ \n         :local pos [ :find \$mac \":\" ];\r\ \n         :set mac ( [ :pick \$mac 0 \$pos ] . [ :pick \$mac (\$pos + 1) 999 ] );\r\ \n       };\r\ \n       :foreach n in=[ /system script environment find where name=(\"shost\" . \$mac) ] do={\r\ \n         :set hostname [ /system script environment get \$n value ];\r\ \n       }\r\ \n       :if ( [ :len \$hostname ] = 0) do={\r\ \n         :set hostname [ get \$i host-name ];\r\ \n       }\r\ \n       :if ( [ :len \$hostname ] > 0) do={\r\ \n         :set hostname ( \$hostname . \".\" . \$zone );\r\ \n         /ip dns static;\r\ \n         :set dnsnode [ find where name=\$hostname ];\r\ \n         :if ( [ :len \$dnsnode ] > 0 ) do={\r\ \n     # it exists. Is its IP the same\?\r\ \n           :set dnsip [ get \$dnsnode address ];\r\ \n           :if ( \$dnsip = \$dhcpip ) do={\r\ \n             :log debug (\"DNS entry for \" . \$hostname . \" does not need updating.\");\r\ \n           } else={\r\ \n             :log info (\"Replacing DNS entry for \" . \$hostname);\r\ \n             /ip dns static remove \$dnsnode;\r\ \n             /ip dns static add name=\$hostname address=\$dhcpip ttl=\$ttl;\r\ \n           }\r\ \n         } else={\r\ \n     # it doesn`t exist. Add it\r\ \n           :log info (\"Adding new DNS entry for \" . \$hostname);\r\ \n           /ip dns static add name=\$hostname address=\$dhcpip ttl=\$ttl;\r\ \n         }\r\ \n       }\r\ \n     }"' 
  args: { executable: False }
  register: last_output
  failed_when: "'syntax error' in '{{ last_output.stdout }}' or 'bad command' in '{{ last_output.stdout }}' or 'invalid value' in '{{ last_output.stdout }}' or 'expected end of command' in '{{ last_output.stdout }}' or 'already exists' in '{{ last_output.stdout }}'"

- name: "Setup DHCP agent scheduler"
  raw: '/system scheduler add comment="Update DNS record for each DHCP lease" disabled=no interval=5m name=\ "DNS record for each DHCP lease" on-event=DHCP2DNS policy=\ read,test start-date=jan/01/1970 start-time=16:00:00' 
  args: { executable: False }
  register: last_output
  failed_when: "'syntax error' in '{{ last_output.stdout }}' or 'bad command' in '{{ last_output.stdout }}' or 'invalid value' in '{{ last_output.stdout }}' or 'expected end of command' in '{{ last_output.stdout }}' or 'already exists' in '{{ last_output.stdout }}'"
